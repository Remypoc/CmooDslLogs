/*
 * generated by Xtext 2.10.0
 */
package fr.paris10.miage.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DslLogsGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.paris10.miage.DslLogs.Model");
		private final Assignment cLogsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cLogsLogParserRuleCall_0 = (RuleCall)cLogsAssignment.eContents().get(0);
		
		//Model:
		//	logs+=Log*;
		@Override public ParserRule getRule() { return rule; }
		
		//logs+=Log*
		public Assignment getLogsAssignment() { return cLogsAssignment; }
		
		//Log
		public RuleCall getLogsLogParserRuleCall_0() { return cLogsLogParserRuleCall_0; }
	}
	public class LogElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.paris10.miage.DslLogs.Log");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLatinSmallLetterAWithGraveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDateDateParserRuleCall_1_0 = (RuleCall)cDateAssignment_1.eContents().get(0);
		private final Keyword cUtilisateurKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUtilisateurAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUtilisateurUtilisateurParserRuleCall_3_0 = (RuleCall)cUtilisateurAssignment_3.eContents().get(0);
		private final Assignment cActionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cActionActionParserRuleCall_4_0 = (RuleCall)cActionAssignment_4.eContents().get(0);
		private final Assignment cParametreAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cParametreParametreParserRuleCall_5_0 = (RuleCall)cParametreAssignment_5.eContents().get(0);
		private final Keyword cRPonseKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cReponseAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cReponseReponseEnumRuleCall_7_0 = (RuleCall)cReponseAssignment_7.eContents().get(0);
		
		//Log:
		//	'à' date=Date
		//	'utilisateur' utilisateur=Utilisateur
		//	action=Action
		//	parametre=Parametre? //Il peut y avoir 0 ou 1 classe parametre
		//	'réponse' reponse=Reponse;
		@Override public ParserRule getRule() { return rule; }
		
		//'à' date=Date 'utilisateur' utilisateur=Utilisateur action=Action parametre=Parametre? //Il peut y avoir 0 ou 1 classe parametre
		//'réponse' reponse=Reponse
		public Group getGroup() { return cGroup; }
		
		//'à'
		public Keyword getLatinSmallLetterAWithGraveKeyword_0() { return cLatinSmallLetterAWithGraveKeyword_0; }
		
		//date=Date
		public Assignment getDateAssignment_1() { return cDateAssignment_1; }
		
		//Date
		public RuleCall getDateDateParserRuleCall_1_0() { return cDateDateParserRuleCall_1_0; }
		
		//'utilisateur'
		public Keyword getUtilisateurKeyword_2() { return cUtilisateurKeyword_2; }
		
		//utilisateur=Utilisateur
		public Assignment getUtilisateurAssignment_3() { return cUtilisateurAssignment_3; }
		
		//Utilisateur
		public RuleCall getUtilisateurUtilisateurParserRuleCall_3_0() { return cUtilisateurUtilisateurParserRuleCall_3_0; }
		
		//action=Action
		public Assignment getActionAssignment_4() { return cActionAssignment_4; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_4_0() { return cActionActionParserRuleCall_4_0; }
		
		//parametre=Parametre?
		public Assignment getParametreAssignment_5() { return cParametreAssignment_5; }
		
		//Parametre
		public RuleCall getParametreParametreParserRuleCall_5_0() { return cParametreParametreParserRuleCall_5_0; }
		
		////Il peut y avoir 0 ou 1 classe parametre
		//'réponse'
		public Keyword getRPonseKeyword_6() { return cRPonseKeyword_6; }
		
		//reponse=Reponse
		public Assignment getReponseAssignment_7() { return cReponseAssignment_7; }
		
		//Reponse
		public RuleCall getReponseReponseEnumRuleCall_7_0() { return cReponseReponseEnumRuleCall_7_0; }
	}
	public class DateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.paris10.miage.DslLogs.Date");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnneeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnneeINTTerminalRuleCall_0_0 = (RuleCall)cAnneeAssignment_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMoisAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMoisINTTerminalRuleCall_2_0 = (RuleCall)cMoisAssignment_2.eContents().get(0);
		private final Keyword cSolidusKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cJourAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cJourINTTerminalRuleCall_4_0 = (RuleCall)cJourAssignment_4.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cHeureAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cHeureINTTerminalRuleCall_6_0 = (RuleCall)cHeureAssignment_6.eContents().get(0);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cMinuteAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cMinuteINTTerminalRuleCall_8_0 = (RuleCall)cMinuteAssignment_8.eContents().get(0);
		private final Keyword cColonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cSecondeAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cSecondeINTTerminalRuleCall_10_0 = (RuleCall)cSecondeAssignment_10.eContents().get(0);
		
		//Date:
		//	annee=INT '/' mois=INT '/' jour=INT '-' heure=INT ':' minute=INT ':' seconde=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//annee=INT '/' mois=INT '/' jour=INT '-' heure=INT ':' minute=INT ':' seconde=INT
		public Group getGroup() { return cGroup; }
		
		//annee=INT
		public Assignment getAnneeAssignment_0() { return cAnneeAssignment_0; }
		
		//INT
		public RuleCall getAnneeINTTerminalRuleCall_0_0() { return cAnneeINTTerminalRuleCall_0_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
		
		//mois=INT
		public Assignment getMoisAssignment_2() { return cMoisAssignment_2; }
		
		//INT
		public RuleCall getMoisINTTerminalRuleCall_2_0() { return cMoisINTTerminalRuleCall_2_0; }
		
		//'/'
		public Keyword getSolidusKeyword_3() { return cSolidusKeyword_3; }
		
		//jour=INT
		public Assignment getJourAssignment_4() { return cJourAssignment_4; }
		
		//INT
		public RuleCall getJourINTTerminalRuleCall_4_0() { return cJourINTTerminalRuleCall_4_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_5() { return cHyphenMinusKeyword_5; }
		
		//heure=INT
		public Assignment getHeureAssignment_6() { return cHeureAssignment_6; }
		
		//INT
		public RuleCall getHeureINTTerminalRuleCall_6_0() { return cHeureINTTerminalRuleCall_6_0; }
		
		//':'
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }
		
		//minute=INT
		public Assignment getMinuteAssignment_8() { return cMinuteAssignment_8; }
		
		//INT
		public RuleCall getMinuteINTTerminalRuleCall_8_0() { return cMinuteINTTerminalRuleCall_8_0; }
		
		//':'
		public Keyword getColonKeyword_9() { return cColonKeyword_9; }
		
		//seconde=INT
		public Assignment getSecondeAssignment_10() { return cSecondeAssignment_10; }
		
		//INT
		public RuleCall getSecondeINTTerminalRuleCall_10_0() { return cSecondeINTTerminalRuleCall_10_0; }
	}
	public class ParametreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.paris10.miage.DslLogs.Parametre");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Parametre:
		//	name=ID '=' value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '=' value=STRING
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class UtilisateurElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.paris10.miage.DslLogs.Utilisateur");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Utilisateur:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.paris10.miage.DslLogs.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDemandeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAppelParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Action:
		//	Demande | Appel;
		@Override public ParserRule getRule() { return rule; }
		
		//Demande | Appel
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Demande
		public RuleCall getDemandeParserRuleCall_0() { return cDemandeParserRuleCall_0; }
		
		//Appel
		public RuleCall getAppelParserRuleCall_1() { return cAppelParserRuleCall_1; }
	}
	public class DemandeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.paris10.miage.DslLogs.Demande");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDemandeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPageSTRINGTerminalRuleCall_1_0 = (RuleCall)cPageAssignment_1.eContents().get(0);
		
		//Demande:
		//	'demande' page=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'demande' page=STRING
		public Group getGroup() { return cGroup; }
		
		//'demande'
		public Keyword getDemandeKeyword_0() { return cDemandeKeyword_0; }
		
		//page=STRING
		public Assignment getPageAssignment_1() { return cPageAssignment_1; }
		
		//STRING
		public RuleCall getPageSTRINGTerminalRuleCall_1_0() { return cPageSTRINGTerminalRuleCall_1_0; }
	}
	public class AppelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.paris10.miage.DslLogs.Appel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAppelleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPageSTRINGTerminalRuleCall_1_0 = (RuleCall)cPageAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cParamTresKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametresAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametresParametreParserRuleCall_2_1_0 = (RuleCall)cParametresAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cEtKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParametresAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParametresParametreParserRuleCall_2_2_1_0 = (RuleCall)cParametresAssignment_2_2_1.eContents().get(0);
		
		//Appel:
		//	'appelle' page=STRING ('paramètres' parametres+=Parametre ('et' parametres+=Parametre)*)? //Il peut y 0 ou 1 paramètres, s'il y a 1 paramètre 
		//	//il peut y avoir 0 ou n autres paramètres en plus
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'appelle' page=STRING ('paramètres' parametres+=Parametre ('et' parametres+=Parametre)*)?
		public Group getGroup() { return cGroup; }
		
		//'appelle'
		public Keyword getAppelleKeyword_0() { return cAppelleKeyword_0; }
		
		//page=STRING
		public Assignment getPageAssignment_1() { return cPageAssignment_1; }
		
		//STRING
		public RuleCall getPageSTRINGTerminalRuleCall_1_0() { return cPageSTRINGTerminalRuleCall_1_0; }
		
		//('paramètres' parametres+=Parametre ('et' parametres+=Parametre)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'paramètres'
		public Keyword getParamTresKeyword_2_0() { return cParamTresKeyword_2_0; }
		
		//parametres+=Parametre
		public Assignment getParametresAssignment_2_1() { return cParametresAssignment_2_1; }
		
		//Parametre
		public RuleCall getParametresParametreParserRuleCall_2_1_0() { return cParametresParametreParserRuleCall_2_1_0; }
		
		//('et' parametres+=Parametre)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'et'
		public Keyword getEtKeyword_2_2_0() { return cEtKeyword_2_2_0; }
		
		//parametres+=Parametre
		public Assignment getParametresAssignment_2_2_1() { return cParametresAssignment_2_2_1; }
		
		//Parametre
		public RuleCall getParametresParametreParserRuleCall_2_2_1_0() { return cParametresParametreParserRuleCall_2_2_1_0; }
	}
	
	public class ReponseElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.paris10.miage.DslLogs.Reponse");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOKEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOKOKKeyword_0_0 = (Keyword)cOKEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cERROREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cERRORKOKeyword_1_0 = (Keyword)cERROREnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Reponse:
		//	OK | ERROR='KO';
		public EnumRule getRule() { return rule; }
		
		//OK | ERROR='KO'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OK
		public EnumLiteralDeclaration getOKEnumLiteralDeclaration_0() { return cOKEnumLiteralDeclaration_0; }
		
		//'OK'
		public Keyword getOKOKKeyword_0_0() { return cOKOKKeyword_0_0; }
		
		//ERROR='KO'
		public EnumLiteralDeclaration getERROREnumLiteralDeclaration_1() { return cERROREnumLiteralDeclaration_1; }
		
		//'KO'
		public Keyword getERRORKOKeyword_1_0() { return cERRORKOKeyword_1_0; }
	}
	
	private final ModelElements pModel;
	private final LogElements pLog;
	private final DateElements pDate;
	private final ParametreElements pParametre;
	private final UtilisateurElements pUtilisateur;
	private final ReponseElements eReponse;
	private final ActionElements pAction;
	private final DemandeElements pDemande;
	private final AppelElements pAppel;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DslLogsGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pLog = new LogElements();
		this.pDate = new DateElements();
		this.pParametre = new ParametreElements();
		this.pUtilisateur = new UtilisateurElements();
		this.eReponse = new ReponseElements();
		this.pAction = new ActionElements();
		this.pDemande = new DemandeElements();
		this.pAppel = new AppelElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.paris10.miage.DslLogs".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	logs+=Log*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Log:
	//	'à' date=Date
	//	'utilisateur' utilisateur=Utilisateur
	//	action=Action
	//	parametre=Parametre? //Il peut y avoir 0 ou 1 classe parametre
	//	'réponse' reponse=Reponse;
	public LogElements getLogAccess() {
		return pLog;
	}
	
	public ParserRule getLogRule() {
		return getLogAccess().getRule();
	}
	
	//Date:
	//	annee=INT '/' mois=INT '/' jour=INT '-' heure=INT ':' minute=INT ':' seconde=INT;
	public DateElements getDateAccess() {
		return pDate;
	}
	
	public ParserRule getDateRule() {
		return getDateAccess().getRule();
	}
	
	//Parametre:
	//	name=ID '=' value=STRING;
	public ParametreElements getParametreAccess() {
		return pParametre;
	}
	
	public ParserRule getParametreRule() {
		return getParametreAccess().getRule();
	}
	
	//Utilisateur:
	//	name=ID;
	public UtilisateurElements getUtilisateurAccess() {
		return pUtilisateur;
	}
	
	public ParserRule getUtilisateurRule() {
		return getUtilisateurAccess().getRule();
	}
	
	//enum Reponse:
	//	OK | ERROR='KO';
	public ReponseElements getReponseAccess() {
		return eReponse;
	}
	
	public EnumRule getReponseRule() {
		return getReponseAccess().getRule();
	}
	
	//Action:
	//	Demande | Appel;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Demande:
	//	'demande' page=STRING;
	public DemandeElements getDemandeAccess() {
		return pDemande;
	}
	
	public ParserRule getDemandeRule() {
		return getDemandeAccess().getRule();
	}
	
	//Appel:
	//	'appelle' page=STRING ('paramètres' parametres+=Parametre ('et' parametres+=Parametre)*)? //Il peut y 0 ou 1 paramètres, s'il y a 1 paramètre 
	//	//il peut y avoir 0 ou n autres paramètres en plus
	//;
	public AppelElements getAppelAccess() {
		return pAppel;
	}
	
	public ParserRule getAppelRule() {
		return getAppelAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
