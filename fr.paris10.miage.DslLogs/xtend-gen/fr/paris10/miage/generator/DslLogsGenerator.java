/**
 * generated by Xtext 2.10.0
 */
package fr.paris10.miage.generator;

import com.google.common.collect.Iterators;
import fr.paris10.miage.dslLogs.Action;
import fr.paris10.miage.dslLogs.Appel;
import fr.paris10.miage.dslLogs.Demande;
import fr.paris10.miage.dslLogs.Log;
import fr.paris10.miage.dslLogs.Parametre;
import fr.paris10.miage.dslLogs.Utilisateur;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class DslLogsGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterator<Utilisateur> _filter = Iterators.<Utilisateur>filter(_allContents, Utilisateur.class);
    final Set<Utilisateur> users = IteratorExtensions.<Utilisateur>toSet(_filter);
    TreeIterator<EObject> _allContents_1 = resource.getAllContents();
    Iterator<Log> _filter_1 = Iterators.<Log>filter(_allContents_1, Log.class);
    final List<Log> logs = IteratorExtensions.<Log>toList(_filter_1);
    String _genererIndex = this.genererIndex(resource);
    CharSequence _genererHTML = this.genererHTML("Logs", _genererIndex);
    fsa.generateFile("index.html", _genererHTML);
    for (final Utilisateur user : users) {
      String _name = user.getName();
      String _plus = (_name + ".html");
      String _name_1 = user.getName();
      String _genererLogs = this.genererLogs(user, logs);
      String _templateImage = this.templateImage(_genererLogs);
      CharSequence _genererHTML_1 = this.genererHTML(_name_1, _templateImage);
      fsa.generateFile(_plus, _genererHTML_1);
    }
  }
  
  public CharSequence genererHTML(final String titre, final String contents) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<HTML>");
    _builder.newLine();
    _builder.append("<HEAD>");
    _builder.newLine();
    _builder.append("<script type=\"text/javascript\" src=jquery.js\"></script>");
    _builder.newLine();
    _builder.append("<script type=\"text/javascript\" src=jquery_plantuml.js\"></script>");
    _builder.newLine();
    _builder.append("<TITLE>");
    _builder.append(titre, "");
    _builder.append("</TITLE>");
    _builder.newLineIfNotEmpty();
    _builder.append("</HEAD>");
    _builder.newLine();
    _builder.append("<BODY>");
    _builder.newLine();
    _builder.append(contents, "");
    _builder.newLineIfNotEmpty();
    _builder.append("</BODY>");
    _builder.newLine();
    _builder.append("</HTML>");
    _builder.newLine();
    return _builder;
  }
  
  public String genererIndex(final Resource resource) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(" ");
    _builder.append("<ul>");
    _builder.newLine();
    _builder.append("\t\t");
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterator<Utilisateur> _filter = Iterators.<Utilisateur>filter(_allContents, Utilisateur.class);
    final Function1<Utilisateur, String> _function = (Utilisateur it) -> {
      return it.getName();
    };
    Iterator<String> _map = IteratorExtensions.<Utilisateur, String>map(_filter, _function);
    Set<String> _set = IteratorExtensions.<String>toSet(_map);
    final Function1<String, String> _function_1 = (String it) -> {
      return this.genererListe(it);
    };
    Iterable<String> _map_1 = IterableExtensions.<String, String>map(_set, _function_1);
    String _join = IterableExtensions.join(_map_1, "\n");
    _builder.append(_join, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("</ul>");
    _builder.newLine();
    return _builder.toString();
  }
  
  /**
   * def genererIndex(Set<String> users) {
   * '''
   * <ul>
   * «FOR user : users»
   * <li><a href="«user».html">«user»</a></li>
   * «ENDFOR»
   * </ul>
   * '''
   * }
   */
  public String templateImage(final String content) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<img uml=\"@startuml");
    _builder.newLine();
    _builder.append("skinparam sequence {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ArrowColor Black");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ActorBorderColor Black");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("LifeLineBorderColor Black");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("LifeLineBackgroundColor Black");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ParticipantBorderColor Black");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ParticipantBackgroundColor White");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ParticipantFontColor Black");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append(content, "");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String genererListe(final String name) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<li><a href=\"");
    _builder.append(name, "");
    _builder.append(".html\">");
    _builder.append(name, "");
    _builder.append("</a></li> ");
    return _builder.toString();
  }
  
  public String genererLogs(final Utilisateur user, final List<Log> logs) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<ul>");
    _builder.newLine();
    {
      for(final Log log : logs) {
        _builder.append("\t");
        _builder.append("\t");
        _builder.newLine();
      }
    }
    _builder.append("</ul>");
    _builder.newLine();
    return _builder.toString();
  }
  
  /**
   * «IF user.name.equals(log.utilisateur.name)»
   * «ENDIF»
   */
  public CharSequence genererAction(final Action action, final Utilisateur user, final boolean ok) {
    if ((action instanceof Demande)) {
      return this.genererAction(((Demande) action), user, ok);
    } else {
      if ((action instanceof Appel)) {
        return this.genererAction(((Appel) action), user, ok);
      }
    }
    return null;
  }
  
  public CharSequence genererAction(final Demande demande, final Utilisateur user, final boolean ok) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = user.getName();
    _builder.append(_name, "");
    _builder.append(" -> SYSTEM : GET ");
    String _page = demande.getPage();
    _builder.append(_page, "");
    _builder.newLineIfNotEmpty();
    {
      if (ok) {
        _builder.append("SYSTEM -[#00AA00] -> ");
        String _name_1 = user.getName();
        _builder.append(_name_1, "");
        _builder.append(" : page");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("SYSTEM -[#AA0000] -> ");
        String _name_2 = user.getName();
        _builder.append(_name_2, "");
        _builder.append(" : erreur");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence genererParametre(final Parametre param) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = param.getName();
    _builder.append(_name, "");
    _builder.append("=");
    String _value = param.getValue();
    _builder.append(_value, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence genererAction(final Appel appel, final Utilisateur user, final boolean ok) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = user.getName();
    _builder.append(_name, "");
    _builder.append(" -> SYSTEM : POST ");
    String _page = appel.getPage();
    _builder.append(_page, "");
    _builder.append("(");
    EList<Parametre> _parametres = appel.getParametres();
    final Function1<Parametre, CharSequence> _function = (Parametre it) -> {
      return this.genererParametre(it);
    };
    List<CharSequence> _map = ListExtensions.<Parametre, CharSequence>map(_parametres, _function);
    String _join = IterableExtensions.join(_map, ", ");
    _builder.append(_join, "");
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    {
      if (ok) {
        _builder.append("SYSTEM -[#00AA00] -> ");
        String _name_1 = user.getName();
        _builder.append(_name_1, "");
        _builder.append(" : page");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("SYSTEM -[#AA0000] -> ");
        String _name_2 = user.getName();
        _builder.append(_name_2, "");
        _builder.append(" : erreur");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
}
